// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
AnalogInput* RobotMap::driveTrainFrontRightPos = NULL;
SpeedController* RobotMap::driveTrainFrontRightSteer = NULL;
PIDController* RobotMap::driveTrainFrontRight = NULL;
AnalogInput* RobotMap::driveTrainFrontLeftPos = NULL;
SpeedController* RobotMap::driveTrainFrontLeftSteer = NULL;
PIDController* RobotMap::driveTrainFrontLeft = NULL;
AnalogInput* RobotMap::driveTrainRearRightPos = NULL;
SpeedController* RobotMap::driveTrainRearRightSteer = NULL;
PIDController* RobotMap::driveTrainRearRight = NULL;
AnalogInput* RobotMap::driveTrainRearLeftPos = NULL;
SpeedController* RobotMap::driveTrainRearLeftSteer = NULL;
PIDController* RobotMap::driveTrainRearLeft = NULL;
SpeedController* RobotMap::driveTrainFrontRightDrive = NULL;
SpeedController* RobotMap::driveTrainFrontLeftDrive = NULL;
SpeedController* RobotMap::driveTrainRearRightDrive = NULL;
SpeedController* RobotMap::driveTrainRearLeftDrive = NULL;
Gyro* RobotMap::driveTrainGyro = NULL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	driveTrainFrontRightPos = new AnalogInput(1);
	lw->AddSensor("DriveTrain", "FrontRightPos", driveTrainFrontRightPos);
	
	driveTrainFrontRightSteer = new Jaguar(0);
	lw->AddActuator("DriveTrain", "FrontRightSteer", (Jaguar*) driveTrainFrontRightSteer);
	
	driveTrainFrontRight = new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ driveTrainFrontRightPos, driveTrainFrontRightSteer, 0.02);
	lw->AddActuator("DriveTrain", "FrontRight", driveTrainFrontRight);
	driveTrainFrontRight->SetContinuous(false); driveTrainFrontRight->SetAbsoluteTolerance(0.2); 
        driveTrainFrontRight->SetOutputRange(-1.0, 1.0);
	driveTrainFrontLeftPos = new AnalogInput(2);
	lw->AddSensor("DriveTrain", "FrontLeftPos", driveTrainFrontLeftPos);
	
	driveTrainFrontLeftSteer = new Jaguar(1);
	lw->AddActuator("DriveTrain", "FrontLeftSteer", (Jaguar*) driveTrainFrontLeftSteer);
	
	driveTrainFrontLeft = new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ driveTrainFrontLeftPos, driveTrainFrontLeftSteer, 0.02);
	lw->AddActuator("DriveTrain", "FrontLeft", driveTrainFrontLeft);
	driveTrainFrontLeft->SetContinuous(false); driveTrainFrontLeft->SetAbsoluteTolerance(0.2); 
        driveTrainFrontLeft->SetOutputRange(-1.0, 1.0);
	driveTrainRearRightPos = new AnalogInput(3);
	lw->AddSensor("DriveTrain", "RearRightPos", driveTrainRearRightPos);
	
	driveTrainRearRightSteer = new Jaguar(2);
	lw->AddActuator("DriveTrain", "RearRightSteer", (Jaguar*) driveTrainRearRightSteer);
	
	driveTrainRearRight = new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ driveTrainRearRightPos, driveTrainRearRightSteer, 0.02);
	lw->AddActuator("DriveTrain", "RearRight", driveTrainRearRight);
	driveTrainRearRight->SetContinuous(false); driveTrainRearRight->SetAbsoluteTolerance(0.2); 
        driveTrainRearRight->SetOutputRange(-1.0, 1.0);
	driveTrainRearLeftPos = new AnalogInput(4);
	lw->AddSensor("DriveTrain", "RearLeftPos", driveTrainRearLeftPos);
	
	driveTrainRearLeftSteer = new Jaguar(3);
	lw->AddActuator("DriveTrain", "RearLeftSteer", (Jaguar*) driveTrainRearLeftSteer);
	
	driveTrainRearLeft = new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ driveTrainRearLeftPos, driveTrainRearLeftSteer, 0.02);
	lw->AddActuator("DriveTrain", "RearLeft", driveTrainRearLeft);
	driveTrainRearLeft->SetContinuous(false); driveTrainRearLeft->SetAbsoluteTolerance(0.2); 
        driveTrainRearLeft->SetOutputRange(-1.0, 1.0);
	driveTrainFrontRightDrive = new Victor(4);
	lw->AddActuator("DriveTrain", "FrontRightDrive", (Victor*) driveTrainFrontRightDrive);
	
	driveTrainFrontLeftDrive = new Victor(5);
	lw->AddActuator("DriveTrain", "FrontLeftDrive", (Victor*) driveTrainFrontLeftDrive);
	
	driveTrainRearRightDrive = new Victor(6);
	lw->AddActuator("DriveTrain", "RearRightDrive", (Victor*) driveTrainRearRightDrive);
	
	driveTrainRearLeftDrive = new Victor(7);
	lw->AddActuator("DriveTrain", "RearLeftDrive", (Victor*) driveTrainRearLeftDrive);
	
	driveTrainGyro = new Gyro(0);
	lw->AddSensor("DriveTrain", "Gyro", driveTrainGyro);
	driveTrainGyro->SetSensitivity(0.007);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


	//driveTrainFrontLeftPos->SetVoltageForPID(true);
	//driveTrainFrontRightPos->SetVoltageForPID(true);
	//driveTrainRearLeftPos->SetVoltageForPID(true);
	//driveTrainRearRightPos->SetVoltageForPID(true);
}
